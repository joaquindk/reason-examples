// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var algo = /* record */[/* contents */5];

algo[0] = algo[0] + 5 | 0;

console.log("Tiene que ser 10", algo, algo[0]);

var myArr = /* array */[
  1,
  2,
  3
];

var newArr = Caml_array.caml_array_set(myArr, 0, 5);

console.log(myArr);

console.log(5, 10);

var myList = /* :: */[
  1,
  /* :: */[
    2,
    /* :: */[
      3,
      /* [] */0
    ]
  ]
];

console.log(Belt_List.get(myList, 0));

console.log(Belt_List.makeBy(10, (function (i) {
            return Math.pow(i, 2);
          })));

console.log("These are equal", Caml_obj.caml_equal(/* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ], /* :: */[
          1,
          /* :: */[
            2,
            /* :: */[
              3,
              /* [] */0
            ]
          ]
        ]));

var resultado = "Winner";

console.log(resultado);

if (myArr.length !== 3) {
  throw [
        Caml_builtin_exceptions.match_failure,
        /* tuple */[
          "BasicTypes.re",
          47,
          4
        ]
      ];
} else {
  var first = myArr[0];
  var second = myArr[1];
  var third = myArr[2];
  console.log(first, second);
  var divideFn = Caml_int32.div;
  console.log(5);
  /* module */[
    /* algo */algo,
    /* myArr */myArr,
    /* newArr */newArr,
    /* myStruct : record */[
      /* a */5,
      /* b */10
    ],
    /* a */5,
    /* b */10,
    /* myList */myList,
    /* resultado */resultado,
    /* first */first,
    /* second */second,
    /* third */third,
    /* divideFn */divideFn
  ];
}

/*  Not a pure module */
